generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  password  String
  createdAt DateTime  @default(now()) // ✅ ensure this line exists
  role      String    @default("user")
  sites     Site[]
  audits    Audit[]
  keywords  Keyword[]
}

model Page {
  id          String    @id @default(cuid())
  url         String
  title       String
  siteId      String
  h1          String?   // Optional H1 tag content
  status      Int?      // HTTP status code, optional for uncrawled pages
  wordCount   Int?      // Word count from crawl, optional if not yet crawled
  metaDesc    String?   // Optional meta description
  lastCrawled DateTime? // Timestamp of last crawl
  site        Site      @relation(fields: [siteId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  audits      Audit[]   @relation("PageAudits")
  @@unique([siteId, url])
  @@map("pages")
}

model Site {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  url       String
  domain    String // ✅ Add this line
  connector String
  status    String?  @default("active") // Add this field, optional with default value
  apiKey    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pages    Page[]
  audits   Audit[]
  keywords Keyword[]

  @@index([userId])
}

model Audit {
  id                   String   @id @default(cuid())
  userId               String?
  siteId               String
  url                  String? // Optional, for page-specific audits
  pageId               String?
  score                Int?
  performanceScore     Int?     // CoreWeb Vitals performance score
  seoScore             Int?     // SEO score
  accessibilityScore   Int?     // Accessibility score
  bestPracticesScore   Int?     // Best practices score
  metrics              Json?    // Add this: JSON for metrics like { fcp: 1.2, lcp: 2.1, cls: 0.05 }
  issues               Json?    // JSON array for issues (if not relational)
  suggestions          Json?    // JSON array for suggestions
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user                 User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  site                 Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  page                 Page?    @relation("PageAudits", fields: [pageId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([siteId])
  @@index([pageId])
}

model Keyword {
  id      String @id @default(cuid())
  keyword String
  volume  Int? // ← Add this line
  userId  String
  position Int?   // Add this (optional if it can be null)
  user    User   @relation(fields: [userId], references: [id])
  siteId  String
  difficulty  Int?     // Add difficulty field, optional
  cpc         Float?   // Add cpc field, optional
  competition String?  // Add competition field, optional
  site    Site   @relation(fields: [siteId], references: [id])
  @@unique([siteId, keyword]) // Add composite unique constraint
}
